"use client";
import { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { X, Plus, ChevronLeft, ChevronRight } from "lucide-react";
import AnimatedParticles from "@/components/AnimatedParticles";

export interface Chunk {
  chunk_id: string;
  category: string;
  content: string;
}

interface ChunksSectionProps {
  chunks?: Chunk[]; // initial chunks from parent
  setChunks?: (chunks: Chunk[]) => void; // optional setter for controlled usage
  isAIChunked?: boolean; // whether chunks were generated by AI
}

export default function ChunksSection({
  chunks = [],
  setChunks,
  isAIChunked,
}: ChunksSectionProps) {
  // Use parent chunks if provided, otherwise local state
  const [userChunks, setUserChunks] = useState<Chunk[]>(chunks);

  // Sync with parent chunks if they change
  useEffect(() => {
    setUserChunks(chunks);
  }, [chunks]);

  const [editingChunk, setEditingChunk] = useState<string | null>(null);
  const [editContent, setEditContent] = useState("");
  const [editCategory, setEditCategory] = useState("");
  const [isAddingNew, setIsAddingNew] = useState(false);
  const [newChunkCategory, setNewChunkCategory] = useState("");
  const [newChunkContent, setNewChunkContent] = useState("");
  const [currentPage, setCurrentPage] = useState(0);
  const [isAnimating] = useState(false);

  const chunksPerPage = 6;
  const WORD_LIMIT = 50;

  // If no chunks provided, use template
  const templateChunks: Chunk[] = [
    {
      chunk_id: "1",
      category: "Experience",
      content:
        "John Doe worked as a Project Manager at GlobalCorp from 2019 to 2023, leading diverse teams and delivering successful outcomes.",
    },
    {
      chunk_id: "2",
      category: "Education",
      content:
        "John Doe graduated from University of California in 2018 with a degree in Business Administration.",
    },
    {
      chunk_id: "3",
      category: "Community & Volunteering",
      content:
        "John Doe volunteered at City Food Bank from 2020 to 2022, organizing donation drives and supporting local families.",
    },
    {
      chunk_id: "4",
      category: "Skills & Interests",
      content:
        "John Doe is skilled in data analysis, public speaking, and enjoys hiking, photography, and learning new languages.",
    },
    {
      chunk_id: "5",
      category: "Achievements",
      content:
        "John Doe received the 'Community Impact Award' in 2021 for outstanding contributions to local initiatives.",
    },
  ];

  const displayChunks = userChunks.length > 0 ? userChunks : templateChunks;
  const totalItems = displayChunks.length + (displayChunks.length < 50 ? 1 : 0);
  const totalPages = Math.ceil(totalItems / chunksPerPage);
  const currentChunks = displayChunks.slice(
    currentPage * chunksPerPage,
    (currentPage + 1) * chunksPerPage
  );

  const addCardIndex = displayChunks.length;
  const addCardPage = Math.floor(addCardIndex / chunksPerPage);
  const shouldShowAddCard =
    currentPage === addCardPage && displayChunks.length < 50;

  const getWordCount = (text: string) =>
    text
      .trim()
      .split(/\s+/)
      .filter((word) => word.length > 0).length;

  // Unified update function for controlled/uncontrolled usage
  const updateChunks = (newChunks: Chunk[]) => {
    setUserChunks(newChunks);
    if (setChunks) setChunks(newChunks);
  };

  const handleChunkClick = (chunk: Chunk) => {
    setEditingChunk(chunk.chunk_id);
    setEditContent(chunk.content);
    setEditCategory(chunk.category);
  };

  const handleSaveEdit = () => {
    if (editingChunk && editContent.trim()) {
      // Only allow edits to real chunks, not templates
      if (editingChunk && editContent.trim() && editCategory.trim()) {
        // First edit converts templates to user's first chunk
        updateChunks([
          {
            chunk_id: editingChunk,
            category: editCategory.trim(),
            content: editContent.trim(),
          },
        ]);
      } else {
        updateChunks(
          userChunks.map((chunk) =>
            chunk.chunk_id === editingChunk
              ? { ...chunk, content: editContent.trim() }
              : chunk
          )
        );
      }
    }
    setEditingChunk(null);
    setEditContent("");
    setEditCategory("");
  };

  const handleDeleteChunk = (chunkId: string) => {
    // Only allow deletes on real chunks, not templates
    if (userChunks.length === 0) {
      // If templates are showing, deleting just does nothing
      return;
    } else {
      updateChunks(userChunks.filter((chunk) => chunk.chunk_id !== chunkId));
    }
    const newTotalChunks = userChunks.length - 1;
    const newTotalPages = Math.ceil(newTotalChunks / chunksPerPage);
    if (currentPage >= newTotalPages && newTotalPages > 0) {
      setCurrentPage(newTotalPages - 1);
    }
  };

  const handleAddNewChunk = () => {
    if (newChunkCategory.trim() && newChunkContent.trim()) {
      const newChunk: Chunk = {
        chunk_id: Date.now().toString(),
        category: newChunkCategory.trim(),
        content: newChunkContent.trim(),
      };
      // When user adds the first chunk, templates disappear
      if (userChunks.length === 0) {
        updateChunks([newChunk]);
      } else {
        updateChunks([...userChunks, newChunk]);
      }
      setNewChunkCategory("");
      setNewChunkContent("");
      setIsAddingNew(false);
      const newTotalChunks =
        userChunks.length === 0 ? 1 : userChunks.length + 1;
      const newChunkPage = Math.floor((newTotalChunks - 1) / chunksPerPage);
      setCurrentPage(newChunkPage);
    }
  };

  return (
    <motion.div
      className="relative max-w-4xl mx-auto"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
    >
      {/* Chunks Grid */}
      <motion.div
        className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" // increased gap for more space
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.5 }}
      >
        {currentChunks.map((chunk, idx) => (
          <AnimatePresence key={chunk.chunk_id}>
            <motion.div
              initial={{ opacity: 0, y: 30, scale: 0.95 }} // slightly larger scale
              animate={{ opacity: 1, y: 0, scale: 1.05 }} // slightly larger scale
              exit={{ opacity: 0, y: -30, scale: 0.95 }}
              transition={{
                duration: 0.6,
                delay: idx * 0.1,
                type: "spring",
                stiffness: 100,
              }}
              className="group relative"
            >
              <motion.div
                className="relative p-6 min-h-[180px] rounded-2xl border-2 border-white/20 bg-white/5 backdrop-blur-md hover:border-white/30 hover:bg-white/8 transition-all duration-300 cursor-pointer h-full"
                whileHover={{ scale: 1.07, y: -2 }}
                whileTap={{ scale: 0.98 }}
                onClick={() => !editingChunk && handleChunkClick(chunk)}
              >
                <div className="flex items-center justify-between mb-3">
                  {editingChunk === chunk.chunk_id ? (
                    <input
                      type="text"
                      value={editCategory ?? chunk.category}
                      onChange={(e) => setEditCategory(e.target.value)}
                      maxLength={30}
                      className="text-xs font-medium text-white/90 uppercase tracking-wider bg-white/10 px-2 py-1 rounded-full w-2/3 focus:outline-none focus:border-white/40 border border-white/20 z-10"
                      placeholder="Category"
                    />
                  ) : (
                    <span className="text-xs font-medium text-white/60 uppercase tracking-wider bg-white/10 px-2 py-1 rounded-full">
                      {chunk.category}
                    </span>
                  )}
                  <motion.button
                    className="opacity-0 group-hover:opacity-100 p-1 rounded-full hover:bg-red-500/20 text-red-400 hover:text-red-300 transition-all z-10"
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.9 }}
                    onClick={(e) => {
                      e.stopPropagation();
                      handleDeleteChunk(chunk.chunk_id);
                    }}
                  >
                    <X className="h-3 w-3" />
                  </motion.button>
                </div>
                <div className="relative z-10">
                  {editingChunk === chunk.chunk_id ? (
                    <div className="space-y-3">
                      <div className="relative">
                        <textarea
                          value={editContent}
                          onChange={(e) => setEditContent(e.target.value)}
                          className="w-full bg-white/10 border border-white/20 rounded-lg p-3 text-white/90 text-sm resize-none focus:outline-none focus:border-white/40"
                          rows={6}
                          autoFocus
                        />
                        <div
                          className={`absolute -bottom-6 right-0 text-xs ${
                            getWordCount(editContent) > WORD_LIMIT
                              ? "text-red-400"
                              : "text-white/50"
                          }`}
                        >
                          {getWordCount(editContent)}/{WORD_LIMIT} words
                        </div>
                      </div>
                      <div className="flex gap-2 mt-8">
                        <button
                          onClick={handleSaveEdit}
                          disabled={
                            getWordCount(editContent) > WORD_LIMIT ||
                            !editContent.trim() ||
                            !editCategory.trim()
                          }
                          className="px-3 py-1 bg-white/20 hover:bg-white/30 disabled:bg-white/10 disabled:cursor-not-allowed rounded-lg text-xs text-white transition-all"
                        >
                          Save
                        </button>
                        <button
                          onClick={() => {
                            setEditingChunk(null);
                            setEditContent("");
                          }}
                          className="px-3 py-1 bg-white/10 hover:bg-white/20 rounded-lg text-xs text-white/70 transition-all"
                        >
                          Cancel
                        </button>
                      </div>
                    </div>
                  ) : (
                    <p className="text-white/90 leading-relaxed text-sm">
                      {chunk.content.length > 200
                        ? chunk.content.slice(0, 200) + "..."
                        : chunk.content}
                    </p>
                  )}
                </div>
                <motion.div
                  className="absolute inset-0 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300"
                  style={{
                    background:
                      "radial-gradient(circle at center, rgba(255,255,255,0.1) 0%, transparent 70%)",
                  }}
                />
              </motion.div>
            </motion.div>
          </AnimatePresence>
        ))}

        {!isAddingNew && shouldShowAddCard && (
          <motion.div
            initial={{ opacity: 0, y: 30, scale: 0.9 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            transition={{ delay: currentChunks.length * 0.1 + 0.2 }}
            className="group relative"
          >
            <motion.div
              className="relative p-4 rounded-2xl border-2 border-dashed border-white/20 bg-white/5 backdrop-blur-md hover:border-white/30 hover:bg-white/8 transition-all duration-300 cursor-pointer h-full flex items-center justify-center min-h-[120px]"
              whileHover={{ scale: 1.02, y: -2 }}
              whileTap={{ scale: 0.98 }}
              onClick={() => setIsAddingNew(true)}
            >
              <div className="text-center">
                <Plus className="h-8 w-8 text-white/40 mx-auto mb-2" />
                <p className="text-white/60 text-sm">Add new highlight</p>
              </div>
            </motion.div>
          </motion.div>
        )}

        {isAddingNew && (
          <motion.div
            initial={{ opacity: 0, y: 30, scale: 0.9 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            className="group relative"
          >
            <div className="relative p-4 rounded-2xl border-2 border-white/30 bg-white/8 backdrop-blur-md h-full">
              <div className="space-y-3">
                <input
                  type="text"
                  placeholder="Category (e.g., Skills, Experience)"
                  value={newChunkCategory}
                  onChange={(e) => setNewChunkCategory(e.target.value)}
                  className="w-full bg-white/10 border border-white/20 rounded-lg p-2 text-white/90 text-sm focus:outline-none focus:border-white/40 placeholder-white/50"
                  maxLength={20}
                />
                <div className="relative">
                  <textarea
                    placeholder="Describe your highlight..."
                    value={newChunkContent}
                    onChange={(e) => setNewChunkContent(e.target.value)}
                    className="w-full bg-white/10 border border-white/20 rounded-lg p-3 text-white/90 text-sm resize-none focus:outline-none focus:border-white/40 placeholder-white/50"
                    rows={3}
                  />
                  <div
                    className={`absolute -bottom-6 right-0 text-xs ${
                      getWordCount(newChunkContent) > WORD_LIMIT
                        ? "text-red-400"
                        : "text-white/50"
                    }`}
                  >
                    {getWordCount(newChunkContent)}/{WORD_LIMIT} words
                  </div>
                </div>
                <div className="flex gap-2 mt-8">
                  <button
                    onClick={handleAddNewChunk}
                    disabled={
                      getWordCount(newChunkContent) > WORD_LIMIT ||
                      !newChunkCategory.trim() ||
                      !newChunkContent.trim()
                    }
                    className="px-3 py-1 bg-white/20 hover:bg-white/30 disabled:bg-white/10 disabled:cursor-not-allowed rounded-lg text-xs text-white transition-all"
                  >
                    Add
                  </button>
                  <button
                    onClick={() => {
                      setIsAddingNew(false);
                      setNewChunkCategory("");
                      setNewChunkContent("");
                    }}
                    className="px-3 py-1 bg-white/10 hover:bg-white/20 rounded-lg text-xs text-white/70 transition-all"
                  >
                    Cancel
                  </button>
                </div>
              </div>
            </div>
          </motion.div>
        )}
      </motion.div>

      {totalPages > 1 && (
        <motion.div
          className="flex items-center justify-center gap-4 mt-8"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.5 }}
        >
          <button
            onClick={() => setCurrentPage((prev) => Math.max(0, prev - 1))}
            disabled={currentPage === 0}
            className="p-2 rounded-full bg-white/10 hover:bg-white/20 disabled:opacity-50 disabled:cursor-not-allowed transition-all"
          >
            <ChevronLeft className="h-4 w-4 text-white" />
          </button>
          <div className="flex gap-2">
            {Array.from({ length: totalPages }).map((_, idx) => (
              <button
                key={idx}
                onClick={() => setCurrentPage(idx)}
                className={`w-2 h-2 rounded-full transition-all ${
                  idx === currentPage
                    ? "bg-white"
                    : "bg-white/30 hover:bg-white/50"
                }`}
              />
            ))}
          </div>
          <button
            onClick={() =>
              setCurrentPage((prev) => Math.min(totalPages - 1, prev + 1))
            }
            disabled={currentPage === totalPages - 1}
            className="p-2 rounded-full bg-white/10 hover:bg-white/20 disabled:opacity-50 disabled:cursor-not-allowed transition-all"
          >
            <ChevronRight className="h-4 w-4 text-white" />
          </button>
        </motion.div>
      )}

      <AnimatedParticles />

      {/* Bottom hint */}
      <motion.div
        className="text-center mt-8"
        initial={{ opacity: 0 }}
        animate={{ opacity: isAnimating ? 0.3 : 1 }}
        transition={{ delay: 1 }}
      >
        {isAIChunked ? (
          <p className="text-white/50 text-sm">
            AI has analyzed your resume and extracted key highlights. Feel free
            to edit or add more!
          </p>
        ) : (
          <p className="text-white/50 text-sm">
            Here are some examples edit them to make them your own!
          </p>
        )}
        <p className="text-white/50 text-sm">
          Tap any highlight to edit • Hover and click X to delete • Max 50 words
          per highlight
        </p>
      </motion.div>
    </motion.div>
  );
}
